1. Converter(библиотека классов)
Универсальный парсер XML и Json.
string SerializeJson(object), string SerializeXML(object) - методы для сериализации объекта в формат Json и XML. 
Поддерживаются любые объекты и типы, будь то простые типы(string, int, float...), классы, содержащие поля и свойства любых типов,
а также массивы и коллекции(унаследованные от IEnumerable). Атрибуты JsonIgnore, XMLIgnore предназначены для игнорирования полей и совйств класса 
при сериализации.
T DeserializeJson<T>(string), T DeserializeXML<T>(string) - методы для преобразования строки в формате Json и XML. 
Строка может быть преобразована любой тип, будь то пройстой тип, массив простых типов, сложный тип с любыми полями и свойствами(простыме, сложные, массивы), 
массив сложных типов и т.д.
2. Third(Windows-служба)
Сам проект windows-службы, использующий Converter.dll. 
При запуске при помощи класса OptionsManager загружает файлы конфигурации config.xml и appsettings.json. Если программа находит оба эти файла,
то настроки загружаются из appsettings.json. Если этот файл не найден или он не соответствует формату json, то загружается config.xml.
Если не удается использовать и appsettings.json, и config.xml, то используются стандартные настройки, а в месте расположения .exe создаются 
оба этих файла со стандартными настройками.
Загрузкой настроек занимается класс OptionsManager, имеющий метод Options GetOptions<T>(). Все настройки логически разбиты на классы:
SendingOptions - настройки путей к папкам(source, target, archive)
Encryptionoptions - настройки шифрования(ключ, включение/выключение шифрования и т.д.)
LoggingOptions - настроки логгирования(путь к файлу лога, включение/выключение логгирования)
ArchiveOptions - настройки архивирования(степень сжатия)
Также все настройки после загрузки из файла конфигурации проходят валидацию(длина ключа, корректность путей и т.д.)